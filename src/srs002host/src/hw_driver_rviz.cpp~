#include "ros/ros.h"
  
#include "std_msgs/Float64.h"
#include "sensor_msgs/JointState.h"
#include "sensor_msgs/Joy.h"
#include "crane_urdf/CANLink.h"

#include <sstream>

float angle_target[6][3]={{0}}; 
float angle_last[6][3]={{0}}; 
float angle_pos[6][3]={{0}};
int   time_target[6]={0};
int   time_pos[6]={0}; 
void canlink_callback(const crane_urdf::CANLink& canlink_msg){
	int recv_id=canlink_msg.id;
	int recv_com=canlink_msg.com;
	float angle[3]={0};
	angle[0]=((float)(((canlink_msg.data[0]<<8)+canlink_msg.data[1])-7500)/4000)*3.141592;
	angle[1]=((float)(((canlink_msg.data[2]<<8)+canlink_msg.data[3])-7500)/4000)*3.141592;
	angle[2]=((float)(((canlink_msg.data[4]<<8)+canlink_msg.data[5])-7500)/4000)*3.141592;
	for(int i=0;i<3;i++){	
		angle_target[recv_id][i]=angle[i];
		angle_last[recv_id][i]=angle_pos[recv_id][i];
	}
	time_target[recv_id]=canlink_msg.data[7];
	time_pos[recv_id]=0;
} 
int main(int argc, char **argv)
{
	ros::init(argc, argv, "hw_driver_rviz");
	ros::NodeHandle n;
	//publish command message to joints/servos of arm
	ros::Publisher  joint_pub = n.advertise<sensor_msgs::JointState>("/joint_states", 1000);
	ros::Subscriber canlink_sub = n.subscribe("/CANLink_out", 10, canlink_callback); 
	sensor_msgs::JointState jointstate;
	jointstate.header.stamp = ros::Time::now();
	jointstate.name.resize(3*6+2);
        jointstate.position.resize(3*6+2);
	
	jointstate.name[ 0]="leg0_joint0";
	jointstate.name[ 1]="leg0_joint1";
	jointstate.name[ 2]="leg0_joint2";
	
	jointstate.name[ 3]="leg1_joint0";
	jointstate.name[ 4]="leg1_joint1";
	jointstate.name[ 5]="leg1_joint2";
	
	jointstate.name[6]="leg2_joint0";
	jointstate.name[7]="leg2_joint1";
	jointstate.name[8]="leg2_joint2";
	
	jointstate.name[ 9]="leg3_joint0";
	jointstate.name[10]="leg3_joint1";
	jointstate.name[11]="leg3_joint2";
	
	jointstate.name[12]="leg4_joint0";
	jointstate.name[13]="leg4_joint1";
	jointstate.name[14]="leg4_joint2";
	
	jointstate.name[15]="leg5_joint0";
	jointstate.name[16]="leg5_joint1";
	jointstate.name[17]="leg5_joint2";

	jointstate.name[18]="gun0_joint0";
	jointstate.name[19]="gun0_joint1";

	ros::Rate loop_rate(100); 
	while (ros::ok()){
		jointstate.header.stamp = ros::Time::now();
		for(int i=0;i<6;i++){
			float rate;
			if(time_target[i]!=0)rate=(float)time_pos[i]/time_target[i];
			for(int j=0;j<3;j++){
				angle_pos[i][j]=(1-rate)*angle_last[i][j]+(rate)*angle_target[i][j];
				jointstate.position[i*3+j]=angle_pos[i][j];
			}
			if(time_pos[i]<time_target[i])time_pos[i]++;			
		}

		joint_pub.publish(jointstate);
 		
		ros::spinOnce();
		loop_rate.sleep();
	} 
 	return 0;
}

