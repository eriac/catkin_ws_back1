#include "ros/ros.h"
  
#include "std_msgs/Int32.h"
#include "sensor_msgs/Joy.h"
#include "std_msgs/String.h"
#include "geometry_msgs/TwistStamped.h"
#include <sstream>
#include <string>

ros::Publisher twist_pub;
ros::Publisher movemode_pub;
std::string movemode_last;
void joy_callback(const sensor_msgs::Joy& joy_msg){
	int   joy_buttons[17]={0};
	float joy_axes[4]={0};
	for(int i=0;i<17;i++)joy_buttons[i]=joy_msg.buttons[i];
	for(int i=0;i<4 ;i++)joy_axes[i]   =joy_msg.axes[i];
	
	geometry_msgs::TwistStamped twist;
	twist.header.stamp = ros::Time::now();
	twist.twist.linear.x=joy_axes[0];
	twist.twist.linear.y=-joy_axes[1];
	twist.twist.angular.z=-joy_axes[2];
	twist_pub.publish(twist);
	
	std_msgs::String movemode;
	/*for PS3
	if     (joy_buttons[12])movemode_last="Rest";
	else if(joy_buttons[13])movemode_last="Stand";
	else if(joy_buttons[14])movemode_last="Walk";
	else if(joy_buttons[15])movemode_last="4";
	*/
	//for Elecom
	if     (joy_buttons[1])movemode_last="Rest";
	else if(joy_buttons[3])movemode_last="Stand";
	else if(joy_buttons[2])movemode_last="Walk";
	else if(joy_buttons[0])movemode_last="4";
	
	movemode.data=movemode_last;
	movemode_pub.publish(movemode);
	
}
int main(int argc, char **argv)
{
	ros::init(argc, argv, "joy_commander");
	ros::NodeHandle n;
	//publish
	twist_pub = n.advertise<geometry_msgs::TwistStamped>("/twist", 1000);
	movemode_pub = n.advertise<std_msgs::String>("/movemode", 1000);
	//Subscribe
	ros::Subscriber joy_sub     = n.subscribe("/joy", 10, joy_callback); 
	
	   
	ros::Rate loop_rate(10); 
	while (ros::ok()){		 		
		ros::spinOnce();
		loop_rate.sleep();
	} 
 	return 0;
}

